// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: student.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const findUserByEmail = `-- name: FindUserByEmail :one
SELECT u.id, 
u.email, 
u.hashed_password,
u.full_name,
u.nim,
u.major,
u.faculty,
u.total_sks,
u.semester,
u.contact,
r.name as role_name
FROM users u 
JOIN roles r ON u.role_id = r.id 
WHERE email = $1
`

type FindUserByEmailRow struct {
	ID             pgtype.UUID
	Email          string
	HashedPassword string
	FullName       string
	Nim            string
	Major          string
	Faculty        string
	TotalSks       pgtype.Int4
	Semester       int32
	Contact        string
	RoleName       string
}

func (q *Queries) FindUserByEmail(ctx context.Context, email string) (FindUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, findUserByEmail, email)
	var i FindUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.HashedPassword,
		&i.FullName,
		&i.Nim,
		&i.Major,
		&i.Faculty,
		&i.TotalSks,
		&i.Semester,
		&i.Contact,
		&i.RoleName,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO users (
    email,
    hashed_password,
    full_name,
    nim,
    major,
    faculty,
    semester,
    contact,
    role_id
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9
) RETURNING id
`

type InsertUserParams struct {
	Email          string
	HashedPassword string
	FullName       string
	Nim            string
	Major          string
	Faculty        string
	Semester       int32
	Contact        string
	RoleID         int32
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, insertUser,
		arg.Email,
		arg.HashedPassword,
		arg.FullName,
		arg.Nim,
		arg.Major,
		arg.Faculty,
		arg.Semester,
		arg.Contact,
		arg.RoleID,
	)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}
